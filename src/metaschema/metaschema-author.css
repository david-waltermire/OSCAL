METASCHEMA { font-family: Calibri, Verdana, sans-serif }

* { display: block }

pre { color: darkgrey }

tag { color: black; font-family: monospace; font-size: 80%; font-weight: bold }

METASCHEMA { }

title { }

import:before      
 { content: 'import module ' oxy_urlChooser(edit, '@href', columns 60) }
 


define-assembly,
define-field,
define-flag      { margin-top: 1ex; margin-bottom: 1ex; border: thin inset black; padding: 0.5em }


define-assembly:before,
define-field:before,
define-flag:before      
 { content:
 oxy_name() 
 oxy_textfield(edit, '@name', columns, 12) 
    }

root-name:before { content: "Root name: "  }


prop:before      
 { content: 'property '
 oxy_textfield(edit, '@name', columns, 25)
 oxy_textfield(edit, '@value', columns, 30) 
    }


define-assembly[group-as]:before,
define-field[group-as]:before,
define-flag[group-as]:before      
 { content:
 oxy_name() 
 oxy_textfield(edit, '@name', columns, 12) }
define-assembly *,
define-field    *,
define-flag     *  { margin: 0em }

define-assembly > * { margin-top: 1em }

pre { padding: 0.5em; background-color: gainsboro }

define-assembly { }

define-field { }

define-flag { }

flag { }

formal-name { font-size: 120%; font-weight: bold; margin: 0.5em 0em }

description, remarks {  max-width: 60em }

remarks { border-left: thin solid black; padding-left: 1em; margin-left: 1em }
remarks p { margin-top: 1em }


example { }

prose { }


p { }

code {  display: inline; font-family: monospace }
q {  display: inline; background-color: lemonchiffon }
em, i {  display: inline; font-style: italic }
strong, b  {  display: inline; font-weight: bold }

example { background-color: lavender; white-space: pre; }

example *:before { content: '<' oxy_name() '>'; font-family: monospace; font-size: 80%  }
example *:after { content: '</' oxy_name() '>'; font-family: monospace; font-size: 80%  }

model { padding-left: 0.5em; border-left: medium solid blue; font-size: 80%; padding-right: 2em }

model model { font-size: 100%; }

flag:before { content:
 oxy_name()
  ' ref: ' oxy_textfield(edit, '@ref', columns, 12) 
   }

assembly:before, field:before {
  content:
    oxy_name() ' named '
    oxy_textfield(edit, '@ref', columns, 12) }

group-as { margin-left: 2em }

group-as:before { content: 'group as '
 oxy_textfield(edit, '@name', columns, 12) }


choice:before { content:
 'a choice between'
 }

prose:before { font-weight: bold; content:
 'prose'
 }

choice > * { margin-left: 2em }

a { display: inline; color: blue }
a:before { content: oxy_urlChooser(        
        edit, "@href",
        columns 42); }


/* CONSTRAINTS */

constraint > * { border: thin solid black; padding: 0.6em }

allowed-values:before { content: "Allowed values"
  ' level: '  oxy_combobox(edit, '@level', editable, false, values, "ERROR, WARNING" ) }

enum { margin-left: 2em; display: list-item;
       font-size: 90%; padding-left: 1em }
enum:before { content: oxy_textfield(edit, '@value', columns, 24); }

index { }
index:before {  content: "Index: "
  ' name: ' oxy_textfield(edit, '@name', columns, 24)
  ' target: ' oxy_textfield(edit, '@target', columns, 52)
  ' level: '  oxy_combobox(edit, '@level', editable, false, values, "ERROR, WARNING" ); }

key-field { margin-left: 2em }
key-field:before {  content: "Key field "
  ' target: ' oxy_textfield(edit, '@target', columns, 52)
  ' level: '  oxy_combobox(edit, '@level', editable, false, values, "ERROR, WARNING" ); }

expect { }
expect:before  {  content: "Expect "
  ' target: ' oxy_textfield(edit, '@target', columns, 52)
  ' test: '   oxy_textfield(edit, '@test', columns, 36)
  ' level: '  oxy_combobox(edit, '@level', editable, false, values, "ERROR, WARNING" ); }

index-has-key { }

index-has-key:before { content: "Index has key: "
  ' name: ' oxy_textfield(edit, '@name', columns, 24)
  ' target: ' oxy_textfield(edit, '@target', columns, 52)
  ' level: '  oxy_combobox(edit, '@level', editable, false, values, "ERROR, WARNING" ); }


