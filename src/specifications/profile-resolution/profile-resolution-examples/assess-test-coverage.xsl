<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    exclude-result-prefixes="#all"
    version="3.0">
    
    <xsl:output indent="yes"/>
    
    
    <xsl:template match="/">
        <html>
            <head>
                <xsl:call-template name="style"/>
            </head>
            <body>
    
                <xsl:comment expand-text="true"> autogenerated { current-dateTime() } </xsl:comment>
                
                <xsl:variable name="collection-at" as="xs:string" expand-text="true">{ document-uri(document('')) ! replace(.,'/[^/]+$','') }?select=*_profile.xml</xsl:variable>
                
                
                <xsl:call-template name="element-block">
                    <xsl:with-param name="elements" select="collection($collection-at)/*"/>
                </xsl:call-template>
            </body>
        </html>
    </xsl:template>
    
    
    <xsl:template name="element-block" expand-text="true">
        <xsl:param name="elements" required="true"/>
        <xsl:where-populated>
            <xsl:for-each-group select="$elements" group-by="name()">
                <div class="e">
                    <p class="eline">
                        <span class="ename">{ current-grouping-key() }</span>
                        <xsl:call-template name="linkfiles"/>
                    </p>
                    <xsl:where-populated>
                        <xsl:call-template name="attribute-block">
                            <xsl:with-param name="attributes" select="current-group()/(attribute::* except @uuid)"/>
                        </xsl:call-template>
                    </xsl:where-populated>
                    <xsl:call-template name="element-block">
                        <xsl:with-param name="elements" select="current-group()/child::*"></xsl:with-param>
                    </xsl:call-template>
                </div>
            </xsl:for-each-group>                
            
        </xsl:where-populated>
    </xsl:template>
    
    <xsl:template name="linkfiles" expand-text="true">
        <xsl:for-each-group select="current-group()" group-by="document-uri(/)">
            <xsl:variable name="localname" select="replace(current-grouping-key(), '.*/', '')"/>
            <a class="filelink" href="{ $localname }">{ $localname }</a>
        </xsl:for-each-group>
    </xsl:template>

    
    
    <xsl:template name="attribute-block" expand-text="true">
        <xsl:param name="attributes" required="true"/>
        <xsl:where-populated>
            <xsl:for-each-group select="$attributes" group-by="name()">
                <details class="a">
                    <summary class="aname">@{ current-grouping-key() } - { count(current-group()) } ({ current-group()=>distinct-values()=>count() })</summary>
                    <div class="alinkset">
                        <xsl:for-each-group select="current-group()" group-by="normalize-space(.)">
                        <p class="avaluelinks">
                            <span class="avalue">{ current-grouping-key() }</span>
                            <xsl:call-template name="linkfiles"/>
                        </p>    
                        </xsl:for-each-group>
                    </div>
                </details>
            </xsl:for-each-group>                
            
        </xsl:where-populated>
    </xsl:template>
    
    <xsl:template name="style" xml:space="preserve">
      <style type="text/css">

html, body { font-family: sans-serif }

p { margin: 0em }

.e, .a { outline: thin solid black }

details { padding-left: 1em; margin: 0.3em }
div     { padding-left: 1em; margin-left: 1em; margin: 0.3em }

summary { display: list-item; list-style-position: outside; margin-left: 1em }

a.filelink { font-size: 80% ; display: inline-block; padding: 0.2em; border: thin solid darkgrey; color: darkgrey; background-color: gainsboro; margin: 0.2em; text-decoration: none; border-radius: 0.2em  }

p:hover a.filelink { color: black }

            </style>
           <!-- <script type="text/javascript" >
                 function flashClass(elemID) {
                 let ilk = document.getElementsByClassName(elemID);
                 for (let i of ilk) { i.classList.toggle('ON'); }
            }
            </script>-->
        </xsl:template>
    
</xsl:stylesheet>