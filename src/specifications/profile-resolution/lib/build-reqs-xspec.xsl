<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:x="http://www.jenitennison.com/xslt/xspec"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns:opr="http://csrc.nist.gov/ns/oscal/profile-resolution"
    xmlns:o="http://csrc.nist.gov/ns/oscal/1.0"
    xpath-default-namespace="http://csrc.nist.gov/ns/oscal/specml"
    version="3.0">

    <xsl:output indent="yes"/>

    <xsl:template match="/">
        <xsl:text>&#xA;</xsl:text>
        <xsl:comment expand-text="true"> autogenerated { current-dateTime() } following model in example-set.xspec</xsl:comment>
        <xsl:processing-instruction name="xml-model">href="lib/xspec-test-dev.sch" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"</xsl:processing-instruction>
        <xsl:processing-instruction name="xml-stylesheet">type="text/css" href="lib/xspec-oxygen.css"</xsl:processing-instruction>
        <xsl:processing-instruction name="specification" expand-text="true">{ replace(document-uri(/),'.*/','') }</xsl:processing-instruction>
        <x:description stylesheet="../../utils/util/resolver-pipeline/oscal-profile-RESOLVE.xsl"
            run-as="external">

            <!-- x:description/@run-as='external' permits the context item to be determined dynamically per scenario
                cf https://github.com/xspec/xspec/wiki/External-Transformation#global-context-item
                
                helper function for cleaning up whitespace:
                  see https://github.com/xspec/xspec/wiki/Integrating-Your-Own-Test-Helpers for
                  for an example see https://github.com/xspec/xspec/blob/master/tutorial/helper/ws-only-text/href_stylesheet.xspec
    -->

            <x:helper
                stylesheet="lib/oscal-profile-test-helper.xsl"/>
            <!-- looking at all the profile documents in the same directory as this XSLT -->

            
            <xsl:apply-templates select="//req" mode="make-file-scenario"/>

        </x:description>

    </xsl:template>

    <xsl:template match="section" mode="test-header">
        <!--<xsl:apply-templates select="parent::section" mode="#current"/>-->
        <!--<xsl:text> </xsl:text>-->
        <xsl:number level="multiple" format="1.1"/>
        <xsl:text> </xsl:text>
        <xsl:apply-templates select="head"/>
        <xsl:text> | </xsl:text>
    </xsl:template>
    
    
    <xsl:template match="req" mode="test-header">
        <xsl:apply-templates select="ancestor::section[1]" mode="#current"/>
        <xsl:text> </xsl:text>
        <xsl:apply-templates/>
    </xsl:template>
    
    <xsl:template match="eg"/>
        
    <xsl:template match="req" mode="make-file-scenario" expand-text="true">
        <xsl:variable name="me" select="."/>
        <xsl:variable name="test-header">
            <xsl:apply-templates select="$me" mode="test-header"/>
        </xsl:variable>
        
        <x:scenario label="{ $test-header => normalize-space() }">
            <xsl:if test="empty(descendant::eg/@href)">
                <xsl:attribute name="pending">[dev]</xsl:attribute>
            </xsl:if>
            <xsl:apply-templates select="descendant::eg" mode="make-file-scenario"/>
        </x:scenario>
    </xsl:template>
    
    <xsl:template mode="make-file-scenario" match="eg" expand-text="true">
        <xsl:variable name="basename" as="xs:string" select="@href => substring-after('requirement-tests/') => replace('\.xml$','')"/>
        <x:scenario label="Example TBD - {.}">
            <xsl:if test="not(matches(@href,'\S')) or starts-with(.,'PENDING')">
                <xsl:attribute name="pending">{ replace(.,'^PENDING:?\s*','') }</xsl:attribute>
            </xsl:if>
                
            <xsl:if test="matches(@href,'\S')">
                    <xsl:attribute name="label">Example { $basename }.xml - {.}</xsl:attribute>
                    <xsl:processing-instruction name="requirement">{ ancestor::req[1]/@id } </xsl:processing-instruction>
                    <x:context href="{ @href }"/>
                    <x:expect label="Resolution of { $basename }.xml" select="opr:scrub(.)"
                        href="requirement-tests/output-expected/{$basename}_RESOLVED.xml"/>
                </xsl:if>
                
            
        </x:scenario>
    </xsl:template>
    
    <xsl:template match="xref" expand-text="true">
        <xsl:text>[Section {@rid}]</xsl:text>
    </xsl:template>
</xsl:stylesheet>
