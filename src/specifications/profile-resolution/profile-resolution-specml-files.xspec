<?xml version="1.0" encoding="UTF-8"?>
<!-- autogenerated 2022-04-19T13:32:10.4758398-04:00 following model in example-set.xspec-->
<?xml-model href="lib/xspec-test-dev.sch" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<?xml-stylesheet type="text/css" href="lib/xspec-oxygen.css"?>
<?specification profile-resolution-specml-102plus.xml?>
<x:description xmlns:o="http://csrc.nist.gov/ns/oscal/1.0"
               xmlns:opr="http://csrc.nist.gov/ns/oscal/profile-resolution"
               xmlns:x="http://www.jenitennison.com/xslt/xspec"
               xmlns:xs="http://www.w3.org/2001/XMLSchema"
               stylesheet="../../utils/util/resolver-pipeline/oscal-profile-RESOLVE.xsl"
               run-as="external">
   <x:helper stylesheet="lib/oscal-profile-test-helper.xsl"/>
   <x:scenario label="requirement-tests/req-include-all-asis.xml">
      <x:context href="requirement-tests/req-include-all-asis.xml"/>
      <x:scenario label="6.1.1 Import URI Resolution | Tools MUST resolve URIs by following Section 5 of RFC3986, with the exception of URI Fragments (URIs that start with &#34;#&#34;). URI Fragments MUST instead be resolved as defined in [Section internalref]."><?requirement req-uri-resolve ?>
         <x:expect label="Resolution of req-include-all-asis.xml"
                   select="opr:scrub(.)"
                   href="requirement-tests/output-expected/req-include-all-asis_RESOLVED.xml"/>
      </x:scenario>
      <x:scenario label="6.1.2 Import Resource Acquisition | URI base corresponds to document URIFor the purposes of resolving URIs using the above specification, the Base URI MUST be considered to be the absolute URI of the containing profile."><?requirement req-uri-base ?>
         <x:expect label="Resolution of req-include-all-asis.xml"
                   select="opr:scrub(.)"
                   href="requirement-tests/output-expected/req-include-all-asis_RESOLVED.xml"/>
      </x:scenario>
      <x:scenario label="6.2.1 include-all | When an import provides the include-all directive, ALL controls and groups in the referenced document (including nested controls) MUST be included."><?requirement req-include-all ?>
         <x:expect label="Resolution of req-include-all-asis.xml"
                   select="opr:scrub(.)"
                   href="requirement-tests/output-expected/req-include-all-asis_RESOLVED.xml"/>
      </x:scenario>
   </x:scenario>
   <x:scenario label="requirement-tests/req-import-by-resource.xml">
      <x:context href="requirement-tests/req-import-by-resource.xml"/>
      <x:scenario label="6.1.2 Import Resource Acquisition | Tools MUST acquire resources at the resolved URI by following Section 5 of RFC3986, with the exception of URI Fragments (URIs that start with &#34;#&#34;). URI Fragments MUST instead be acquired as defined in [Section internalref]."><?requirement req-uri-aquire ?>
         <x:expect label="Resolution of req-import-by-resource.xml"
                   select="opr:scrub(.)"
                   href="requirement-tests/output-expected/req-import-by-resource_RESOLVED.xml"/>
      </x:scenario>
      <x:scenario label="6.1.3 Internal References | In the context of the Import Phase, internal references will only appear as a reference to a profile or catalog that is in the resources section of the source. When tools encounter such a reference, they MUST locate the object in resources with the matching UUID value, and resolve the resource. By OSCAL model requirements, a given resource can have zero to many rlink objects and zero to one base64 objects; however, it must have at least one of the two present. Tools can assume that any of these each resolves to the same underlying OSCAL object, although potentially in different serialization formats. For deterministic resolution of these backmatter OSCAL objects, tools need to adhere to the following requirements:"><?requirement req-internal ?>
         <x:expect label="Resolution of req-import-by-resource.xml"
                   select="opr:scrub(.)"
                   href="requirement-tests/output-expected/req-import-by-resource_RESOLVED.xml"/>
      </x:scenario>
   </x:scenario>
   <x:scenario label="requirement-tests/req-missing-resource.xml">
      <x:context href="requirement-tests/req-missing-resource.xml"/>
      <x:scenario label="6.1.2 Import Resource Acquisition | In the case that acquiring a resource fails, the tool MUST cease processing and provide an error. In order to ensure profile resolution results in the same catalog regardless of which tool resolves it, all imports must successfully resolve. While this may cause inconvenience if resources are frequently not available, it ensures interoperability."
                  pending="[spec]"><?requirement req-uri-error ?>
         <x:expect label="Resolution of req-missing-resource.xml"
                   select="opr:scrub(.)"
                   href="requirement-tests/output-expected/req-missing-resource_RESOLVED.xml"/>
      </x:scenario>
      <x:scenario label="6.1.3 Internal References | If the object fetched cannot be found or is not a valid OSCAL object, the tool MUST cease processing and provide an error."
                  pending="[spec]"><?requirement req-internal-error ?>
         <x:expect label="Resolution of req-missing-resource.xml"
                   select="opr:scrub(.)"
                   href="requirement-tests/output-expected/req-missing-resource_RESOLVED.xml"/>
      </x:scenario>
   </x:scenario>
   <x:scenario label="requirement-tests/req-broken-import.xml">
      <x:context href="requirement-tests/req-broken-import.xml"/>
      <x:scenario label="6.1.3 Internal References | If the object fetched cannot be found or is not a valid OSCAL object, the tool MUST cease processing and provide an error."
                  pending="[spec]"><?requirement req-internal-error ?>
         <x:expect label="Resolution of req-broken-import.xml"
                   select="opr:scrub(.)"
                   href="requirement-tests/output-expected/req-broken-import_RESOLVED.xml"/>
      </x:scenario>
   </x:scenario>
   <x:scenario label="requirement-tests/req-chained-all-asis.xml">
      <x:context href="requirement-tests/req-chained-all-asis.xml"/>
      <x:scenario label="6.1.4 Resolving Imports of Profiles | If the resource acquired is an OSCAL Profile, the tool MUST apply this specification to resolve it, then continue processing having imported the resulting catalog."><?requirement req-circular-resolve ?>
         <x:expect label="Resolution of req-chained-all-asis.xml"
                   select="opr:scrub(.)"
                   href="requirement-tests/output-expected/req-chained-all-asis_RESOLVED.xml"/>
      </x:scenario>
      <x:scenario label="6.1.4 Resolving Imports of Profiles | When a profile imports a profile, the subordinate profile SHOULD be resolved first into a catalog using this specification, before it is imported."><?requirement req-circular-catalog ?>
         <x:expect label="Resolution of req-chained-all-asis.xml"
                   select="opr:scrub(.)"
                   href="requirement-tests/output-expected/req-chained-all-asis_RESOLVED.xml"/>
      </x:scenario>
   </x:scenario>
   <x:scenario label="requirement-tests/req-circular_import.xml">
      <x:context href="requirement-tests/req-circular_import.xml"/>
      <x:scenario label="6.1.4 Resolving Imports of Profiles | If a processor encounters a circular import as described above (self-imports are inherently circular), the processor MUST cease processing and generate an error."><?requirement req-circular-error ?>
         <x:expect label="Resolution of req-circular_import.xml"
                   select="opr:scrub(.)"
                   href="requirement-tests/output-expected/req-circular_import_RESOLVED.xml"/>
      </x:scenario>
   </x:scenario>
   <x:scenario label="requirement-tests/req-include-all-flat.xml">
      <x:context href="requirement-tests/req-include-all-flat.xml"/>
      <x:scenario label="6.2.1 include-all | When an import provides the include-all directive, ALL controls and groups in the referenced document (including nested controls) MUST be included."><?requirement req-include-all ?>
         <x:expect label="Resolution of req-include-all-flat.xml"
                   select="opr:scrub(.)"
                   href="requirement-tests/output-expected/req-include-all-flat_RESOLVED.xml"/>
      </x:scenario>
      <x:scenario label="7.2.1 No Structuring Directive | If no merge directive is given in the profile, or if a merge is given without a structuring directive, structuring the output MUST be treated as if the structuring directive flat was given. For example, a profile with no merge directive:"><?requirement req-structure-none ?>
         <x:expect label="Resolution of req-include-all-flat.xml"
                   select="opr:scrub(.)"
                   href="requirement-tests/output-expected/req-include-all-flat_RESOLVED.xml"/>
      </x:scenario>
   </x:scenario>
</x:description>
